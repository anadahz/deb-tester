machine:

TESTING_PACKAGES="tor tor-geoipdb"
CHROOT_DIR=/tmp/arm-chroot
MIRROR="http://http.debian.net/debian/"
VERSION=wheezy
CHROOT_ARCH=armel

HOST_DEPENDENCIES="debootstrap qemu-user-static binfmt-support sbuild"

GUEST_DEPENDENCIES="build-essential git m4 sudo python"

dependencies:
  cache_directories:
    - armel-chroot
  pre:
    - sudo apt-get install -qq -y ${HOST_DEPENDENCIES}
    - sudo mkdir ${CHROOT_DIR}
    - sudo debootstrap --foreign --no-check-gpg --include=fakeroot,build-essential \
        --arch=${CHROOT_ARCH} ${VERSION} ${CHROOT_DIR} ${MIRROR}
    - sudo cp /usr/bin/qemu-arm-static ${CHROOT_DIR}/usr/bin/
    - sudo chroot ${CHROOT_DIR} ./debootstrap/debootstrap --second-stage
    - sudo sbuild-createchroot --arch=${CHROOT_ARCH} --foreign --setup-only \
        ${VERSION} ${CHROOT_DIR} ${MIRROR}
    - # environment
    - echo "export ARCH=${ARCH}" > envvars.sh
    - echo "export CIRCLE_ARTIFCATS=${CIRCLE_ARTIFCATS}" >> envvars.sh
    - chmod a+x envvars.sh
    - sudo chroot ${CHROOT_DIR} apt-get update
    - sudo chroot ${CHROOT_DIR} apt-get --allow-unauthenticated install \
        -qq -y ${GUEST_DEPENDENCIES}
  
    - sudo mkdir -p ${CHROOT_DIR}/${CIRCLE_ARTIFCATS}
    - sudo rsync -av ${CIRCLE_ARTIFCATS}/ ${CHROOT_DIR}/${CIRCLE_ARTIFCATS}/
  
    - sudo touch ${CHROOT_DIR}/.chroot_is_done
  
    - if [ -e "/.chroot_is_done" ]; then
      echo "Running inside chrooted environment"
    
      . ./envvars.sh
    else
      if [ "${ARCH}" = "arm" ]; then
        echo "Setting up chrooted ARM environment"
        setup_arm_chroot
      fi
    fi

test:
  override:
    - echo "Running tests"
    - echo "Environment: $(uname -a)"
    - sudo apt-get install -q -y ${TESTING_PACKAGES}

